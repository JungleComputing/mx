<project name="MxIbis" default="build" basedir=".">
    <description>
	Build file for Ibis
    </description>

    <target name="build"
            description="Build the IPL and its implementations"
            depends="clean,compile"
    />

    <!-- Names for generated directories. -->
    <property name="javadoc" value="javadoc/ipl" />

    <property name="version" value="2.2" />
    <property name="version-tag" value="-2.2" />

    <property name="sources-filename" value="ipl" />

    <!-- import environment properties -->
    <property environment="env" />

    <path id="external.jars">
        <fileset dir="lib">
            <include name="*.jar" />
        </fileset>
    </path>

    <path id="default.classpath">
        <fileset dir="lib">
            <include name="*.jar" />
        </fileset>
        <pathelement path="tmp" />
    </path>

    <target name="copy-external">
        <mkdir dir="lib" />
        <!-- Copy external libraries to lib directory -->
        <copy todir="lib">
            <fileset dir="external" excludes="log4jME*.jar" />
        </copy>
    </target>
	
    <!-- Compile MXIbis -->
    <target name="compile" depends="copy-external">
        <mkdir dir="tmp" />

        <!-- Compile the java code from src into tmp -->
        <javac srcdir="src/"
               destdir="tmp"
               debug="on"
               source="1.5"
               target="1.5"
               classpathref="external.jars"
        >
            <compilerarg value="-Xlint:unchecked" />
        </javac>

        <!-- Run Ibisc -->
        <java classname="ibis.compile.Ibisc"
              taskname="Ibisc"
              failonerror="true"
              dir="tmp"
              maxmemory="512m"
              fork="true"
        >
            <arg line="." />
            <classpath refid="default.classpath" />
        </java>

		<!-- mxio -->
		<!-- Create jni headers -->
		<exec executable="javah" >
			<arg value="-jni"/>
			<arg value="-classpath"/>
			<arg value="tmp"/>
			<arg value="-d"/>
			<arg value="src/mxio"/>
			<arg value="mxio.JavaMx"/>
		</exec>
		<!-- compile c library -->
		<exec executable="make" dir="src/mxio"/>

    	
        <!-- Create jar files. Set a checksum with version info in the manifests -->

    	
    	<!-- Create mxio jar -->
		<jar destfile="lib/mxio${version-tag}.jar">
			<fileset dir="tmp"
                     includes="mxio/**/*.class" />
			<fileset dir="." includes="LICENSE.txt" />
		</jar>
    	
        <!-- MXIbis -->

        <property name="mx.files" value="ibis/ipl/impl/mx/**/*.class" />

        <checksum totalproperty="mx.checksum">
            <fileset dir="tmp" includes="${mx.files}" />
        </checksum>


        <jar destfile="lib/ipl-impl-mx${version-tag}.jar">
            <fileset dir="tmp" includes="${mx.files}" />
            <metainf dir="." includes="LICENSE.txt" />
            <manifest>
                <attribute name="Ibis-Starter-Class"
                           value="ibis.ipl.impl.mx.MxIbisStarter"
                />
                <attribute name="Ibis-IPL-Version" value="${version}" />
                <attribute name="Ibis-Implementation-Version"
                           value="${mx.checksum}"
                />
                <attribute name="Ibis-NickName" value="mx" />
            </manifest>
        </jar>

        <!-- Backup manifest. Used if the jar file manifests cannot be loaded
             for some reason (e.g. on android) -->
        <propertyfile file="tmp/ibis/ipl/IPL_MANIFEST" comment="IPL Manifest">
            <entry key="support.version" value="${support.checksum}" />
            <entry key="implementation.version"
                   value="${implementation.checksum}"
            />

            <!-- implementation nicknames -->
            <entry key="implementations"
                   value="mx"
            />

            <entry key="mx.starter.class"
                   value="ibis.ipl.impl.mx.MxIbisStarter"
            />
            <entry key="mx.ipl.version" value="${version}" />
            <entry key="mx.version" value="${mx.checksum}" />

        </propertyfile>

        <!-- Add manifest property file to ipl jar -->
        <jar destfile="lib/ipl${version-tag}.jar" update="true">
            <fileset dir="tmp" includes="ibis/ipl/IPL_MANIFEST" />
        </jar>

        <delete dir="tmp" />
    </target>

    <!-- Clean up everything except the rewritten classlibs -->
    <target name="clean" description="Clean up (leaves rewritten classlibs)">
        <delete dir="tmp" />
        <delete dir="lib" />
        <!--<delete dir="javadoc/ipl" /> -->

        <delete file="src/mxio/mxio_JavaMx_HandleManager.h" />
        <delete file="src/mxio/mxio_JavaMx_LinkManager.h" />
        <delete file="src/mxio/mxio_JavaMx.h" />
    </target>

    <target name="rewrite"
            depends="build"
            description="Preprocess all serializable classes of standard Java"
    >
        <!-- Create a directory for the rewritten classes -->

        <mkdir dir="${classlibs}" />

        <!-- Then, find and extract jars.  -->
        <unjar dest="${classlibs}">
            <patternset>
                <include name="**/*.class" />
            </patternset>
            <fileset dir="${env.JAVA_HOME}/jre/lib">
                <include name="**/*.jar" />
            </fileset>
        </unjar>

        <!-- Then, rewrite.  -->
        <java classname="ibis.compile.Ibisc"
              taskname="Ibisc"
              failonerror="true"
              maxmemory="512m"
              dir="${rewritten-classlibs}"
              fork="true"
        >
            <arg line="." />
            <classpath refid="default.classpath" />
        </java>
    </target>

    <target name="rewritten-clean"
            description="Clean up rewritten classlibs (except under sym links)"
    >
        <!--
		If ${rewritten-classlibs} is a sym-link, we let the directory
		live on. In this case, I suppose the user knows what he is up to.
		If it isn't a symlink (which is the normal case) go ahead and
		throw away all your rewritten stuff.	RFHH
		-->
        <delete includeEmptyDirs="true">
            <fileset dir="." followsymlinks="false">
                <include name="classlibs/**" />
            </fileset>
        </delete>
    </target>

</project>
